/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package certificacionfebrero;
import Conexion.conexion;
import Mapeos.Aspirantes;
import Mapeos.AspirantesId;
import Mapeos.Categorias;
import Mapeos.Competencias;
import Mapeos.CompetenciasId;
import Mapeos.Disciplinas;
import java.awt.HeadlessException;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Calendar;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.jvnet.substance.SubstanceLookAndFeel;
import org.jvnet.substance.shaper.StandardButtonShaper;
/**
 *
 * @author Rubens
 */
public class Formulario1 extends javax.swing.JFrame {

    /**
     * Creates new form Formulario1
     */
    conexion cone = new conexion();
    DefaultListModel lista = new DefaultListModel();
    DefaultListModel list1 = new DefaultListModel();
    DefaultListModel list2 = new DefaultListModel();
    DefaultTableModel tabla;
    DefaultTableModel tabla2;
    DefaultTableModel tabla3;
    AspirantesId dni_id;
    Aspirantes nuevo;
    CompetenciasId datos_comp;
    Competencias compet;
    Categorias datos_cat;
    Disciplinas datos_dis;
    String sexo;
    String categ;
    Boolean habilitado;
    
    public Formulario1() {
        initComponents();
        jList1.setModel(lista);
        jList3.setModel(list1);
        this.llenarLista();
        tabla2 = (DefaultTableModel)jTable2.getModel();
        jTable2.setVisible(false);
        JFrame.setDefaultLookAndFeelDecorated(true);
        SubstanceLookAndFeel.setSkin("org.jvnet.substance.skin.CremeCoffeeSkin");
        this.jButton1.putClientProperty(SubstanceLookAndFeel.BUTTON_SHAPER_PROPERTY, new StandardButtonShaper());
        this.jButton2.putClientProperty(SubstanceLookAndFeel.BUTTON_SHAPER_PROPERTY, new StandardButtonShaper());
        this.jButton3.putClientProperty(SubstanceLookAndFeel.BUTTON_SHAPER_PROPERTY, new StandardButtonShaper());
        
    }

    @SuppressWarnings("empty-statement")
    private void llenarLista()
    {
        String SQL1 = "SELECT * FROM mydb.escuela;";
        String guarda1 = null;
        
        String SQL2 = "SELECT * FROM mydb.categorias;";
        String guarda2 = null;
        
        String SQL3 = "SELECT * FROM mydb.disciplinas;";
        
        try
        {
            cone.conectar();
            Statement nueva_conexion = cone.getConnection().createStatement();
            ResultSet resultado1 = nueva_conexion.executeQuery(SQL1);
            while(resultado1.next())
            {
                guarda1 = resultado1.getString(1);
                lista.addElement(guarda1);
            }
            
            ResultSet resultado2 = nueva_conexion.executeQuery(SQL2);
            while(resultado2.next())
            {
                guarda2 = resultado2.getString(1);
                list1.addElement(guarda2);
            }
            
            tabla = (DefaultTableModel)jTable1.getModel();
            ResultSet resultado3 = nueva_conexion.executeQuery(SQL3);
            while(resultado3.next())
            {
                tabla.addRow(new Object[]{false, resultado3.getString(1)});
            }
            
            cone.desconectar();
        }
        catch(SQLException e)
        {
            JOptionPane.showMessageDialog(null, e.toString());
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jTextField5 = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList3 = new javax.swing.JList<>();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList<>();
        jButton1 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jScrollPane7 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();

        jDialog1.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        jDialog1.setTitle("Nuevo Aspirante");
        jDialog1.setFocusCycleRoot(true);
        jDialog1.setLocation(new java.awt.Point(400, 150));
        jDialog1.setMinimumSize(new java.awt.Dimension(600, 300));
        jDialog1.setModal(true);
        jDialog1.setResizable(false);
        jDialog1.setSize(new java.awt.Dimension(600, 300));
        jDialog1.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Nombres");
        jDialog1.getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(94, 34, -1, -1));

        jLabel2.setText("Apellidos");
        jDialog1.getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(94, 60, -1, -1));

        jLabel3.setText("Dirección");
        jDialog1.getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(93, 86, -1, -1));

        jLabel4.setText("Fecha de nacimiento");
        jDialog1.getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(38, 112, -1, -1));

        jLabel5.setText("Sexo");
        jDialog1.getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(112, 140, -1, -1));

        jLabel6.setText("DNI");
        jDialog1.getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(118, 169, -1, -1));
        jDialog1.getContentPane().add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(154, 31, 312, -1));
        jDialog1.getContentPane().add(jTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(154, 57, 312, -1));
        jDialog1.getContentPane().add(jTextField3, new org.netbeans.lib.awtextra.AbsoluteConstraints(154, 83, 312, -1));
        jDialog1.getContentPane().add(jTextField4, new org.netbeans.lib.awtextra.AbsoluteConstraints(154, 109, 312, -1));

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setText("Masculino");
        jDialog1.getContentPane().add(jRadioButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(154, 136, -1, -1));

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setText("Femenino");
        jDialog1.getContentPane().add(jRadioButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(243, 136, -1, -1));
        jDialog1.getContentPane().add(jTextField5, new org.netbeans.lib.awtextra.AbsoluteConstraints(154, 166, 312, -1));

        jButton4.setBackground(new java.awt.Color(255, 0, 51));
        jButton4.setText("Aceptar");
        jButton4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jButton4.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jDialog1.getContentPane().add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 220, 64, 28));

        jButton5.setBackground(new java.awt.Color(255, 0, 51));
        jButton5.setText("Cancelar");
        jButton5.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jButton5.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jDialog1.getContentPane().add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 220, 64, 28));

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Registrar Aspirantes");
        setLocation(new java.awt.Point(300, 100));
        setPreferredSize(new java.awt.Dimension(800, 550));
        setResizable(false);
        setSize(new java.awt.Dimension(800, 550));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Categorías", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 1, 12))); // NOI18N
        jPanel2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel2.setName("lista"); // NOI18N
        jPanel2.setOpaque(false);

        jList3.setEnabled(false);
        jList3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList3MouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jList3);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 395, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE)
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Seleccione una Entidad Educativa", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 1, 12))); // NOI18N
        jPanel3.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel3.setName("lista"); // NOI18N
        jPanel3.setOpaque(false);

        jScrollPane1.setViewportView(jList1);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Aspirantes", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 1, 12))); // NOI18N
        jPanel4.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel4.setName("lista"); // NOI18N
        jPanel4.setOpaque(false);

        jList2.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList2ValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(jList2);

        jButton1.setBackground(new java.awt.Color(0, 0, 255));
        jButton1.setText("Nuevo Aspirante");
        jButton1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(0, 219, Short.MAX_VALUE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Competencias", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Tahoma", 1, 12))); // NOI18N
        jPanel5.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel5.setName("lista"); // NOI18N
        jPanel5.setOpaque(false);

        jTable1.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "", "Disciplina"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTable1.setEnabled(false);
        jTable1.setMaximumSize(new java.awt.Dimension(10, 64));
        jTable1.setMinimumSize(new java.awt.Dimension(10, 64));
        jTable1.setPreferredSize(new java.awt.Dimension(360, 100));
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(30);
            jTable1.getColumnModel().getColumn(0).setMaxWidth(30);
            jTable1.getColumnModel().getColumn(1).setResizable(false);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(80);
        }

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 98, Short.MAX_VALUE)
        );

        jButton2.setBackground(new java.awt.Color(0, 0, 255));
        jButton2.setText("Aceptar");
        jButton2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jButton2.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(0, 0, 255));
        jButton3.setText("Cancelar");
        jButton3.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jButton3.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jScrollPane5.setPreferredSize(new java.awt.Dimension(0, 0));

        jTable2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nombres", "Apellidos", "Direccion", "Fecha Nacimiento", "Sexo", "DNI", "categoria", "cargado"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.setMinimumSize(new java.awt.Dimension(0, 0));
        jTable2.setPreferredSize(new java.awt.Dimension(0, 0));
        jScrollPane5.setViewportView(jTable2);
        if (jTable2.getColumnModel().getColumnCount() > 0) {
            jTable2.getColumnModel().getColumn(0).setResizable(false);
            jTable2.getColumnModel().getColumn(1).setResizable(false);
            jTable2.getColumnModel().getColumn(2).setResizable(false);
            jTable2.getColumnModel().getColumn(3).setResizable(false);
            jTable2.getColumnModel().getColumn(4).setResizable(false);
            jTable2.getColumnModel().getColumn(5).setResizable(false);
        }

        jScrollPane7.setMaximumSize(new java.awt.Dimension(0, 0));
        jScrollPane7.setMinimumSize(new java.awt.Dimension(0, 0));
        jScrollPane7.setName(""); // NOI18N
        jScrollPane7.setPreferredSize(new java.awt.Dimension(0, 0));

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "dni", "disciplina"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable4.setMaximumSize(new java.awt.Dimension(0, 0));
        jTable4.setMinimumSize(new java.awt.Dimension(0, 0));
        jTable4.setPreferredSize(new java.awt.Dimension(0, 0));
        jScrollPane7.setViewportView(jTable4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(295, 295, 295))))
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //boton Nuevo Aspirante
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        borrarDisciplinas();
        int[] indices = jList1.getSelectedIndices();
        if(indices.length == 0)
        {
            JOptionPane.showMessageDialog(null, "Debe seleccionar un Colegio para continuar", "ATENCIÓN", JOptionPane.INFORMATION_MESSAGE);
        } else {
            inscripcion();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    public void inscripcion()
    {
        jDialog1.pack();
        jDialog1.revalidate();
        jDialog1.isAlwaysOnTop();
        jDialog1.setVisible(true);
    }
    
    //boton cancelar de la pantalla Nuevo Aspirante
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        limpiarnombres();
        jDialog1.dispose();
        habilitado = true;
        try {
            if (jList2.getModel().getSize() == 0) {
                jTable1.setEnabled(false);
            }
        }
        catch(Exception e)
        {
            jTable1.setEnabled(false);
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    
    //metodo para agregar aspirantes a la lista de aspirantes
    public void muestra(String nom) {
        jList2.setModel(list2);
        list2.addElement(nom);
        limpiarnombres();

        int ax = JOptionPane.showConfirmDialog(null, "¿Desea registrar otro aspirante?", "CONSULTA", JOptionPane.OK_CANCEL_OPTION);
        if (ax == JOptionPane.YES_OPTION) {
            inscripcion();
        } else {
            JOptionPane.showMessageDialog(null, "A continuación seleccione un Aspirante e indique las competencias donde se inscribirá", "ATENCIÓN", JOptionPane.INFORMATION_MESSAGE);            
        }
    }

    //boton aceptar de la pantalla Nuevo Aspirante
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        
        if(jTextField1.getText().length() == 0 && jTextField2.getText().length() == 0 && jTextField3.getText().length() == 0 && jTextField4.getText().length() == 0 && jTextField5.getText().length() == 0)
        {
            JOptionPane.showMessageDialog(null, "INGRESE DATOS DEL ASPIRANTE", "ATENCIÓN", JOptionPane.ERROR_MESSAGE);
        }
        else if(jTextField1.getText().length() == 0)
        {
            JOptionPane.showMessageDialog(null, "INGRESE NOMBRES DEL ASPIRANTE", "ATENCIÓN", JOptionPane.ERROR_MESSAGE);
        }
        else if(jTextField2.getText().length() == 0)
        {
            JOptionPane.showMessageDialog(null, "INGRESE APELLIDOS DEL ASPIRANTE", "ATENCIÓN", JOptionPane.ERROR_MESSAGE);
        }
        else if(jTextField3.getText().length() == 0)
        {
            JOptionPane.showMessageDialog(null, "INGRESE DIRECCIÓN DONDE VIVE EL ASPIRANTE", "ATENCIÓN", JOptionPane.ERROR_MESSAGE);
        }
        else if(jTextField4.getText().length() == 0)
        {
            JOptionPane.showMessageDialog(null, "INGRESE FECHA DE NACIMIENTO DEL ASPIRANTE", "ATENCIÓN", JOptionPane.ERROR_MESSAGE);
        }
        else if(jTextField5.getText().length() == 0)
        {
            JOptionPane.showMessageDialog(null, "INGRESE DNI DEL ASPIRANTE", "ATENCIÓN", JOptionPane.ERROR_MESSAGE);
        }
        else if(jTextField5.getText().length() > 8)
        {
            JOptionPane.showMessageDialog(null, "INGRESE CORRECTAMENTE DNI", "ATENCIÓN", JOptionPane.ERROR_MESSAGE);
        }
        else if(jTextField5.getText().length() < 8)
        {
            JOptionPane.showMessageDialog(null, "INGRESE CORRECTAMENTE DNI", "ATENCIÓN", JOptionPane.ERROR_MESSAGE);
        }
        else if(jRadioButton1.isSelected() == false && jRadioButton2.isSelected() == false)
        {
             JOptionPane.showMessageDialog(null, "SELECCIONE SEXO DEL ASPIRANTE", "ATENCIÓN", JOptionPane.ERROR_MESSAGE);           
        }
        else {
            if(fechacorrecta()==true)
            {
                String dni = jTextField5.getText();
                String fecha_nac = jTextField4.getText();
                String fechaNac = fecha_nac.substring(6, 10); //año de nacimiento del aspirante
                int nacimiento = Integer.parseInt(fechaNac);

                Calendar calendario = Calendar.getInstance();
                int year = calendario.get(Calendar.YEAR); //fecha actual
                /* las categorias existentes son (el administrador puede agregar mas categorias):
                       1. Infantiles Mujeres (5 - 7 años)
                       2. Infantiles Varones (5 - 7 años)
                       3. Menores Mujeres (8 - 10 años)
                       4. Menores Varones (8 - 10 años)
                 */
                if (jRadioButton1.isSelected() == true) {
                    sexo = "masculino";
                } else {
                    sexo = "femenino";
                }
                int edad = year - nacimiento;

                if (edad >= 5 && edad < 8) {
                    if(sexo.equals("femenino"))
                    {
                        categ = "Infantiles Mujeres";
                    }
                    else
                    {
                        categ = "Infantiles Varones";
                    }
                    cargadatos(dni, fecha_nac, categ);
                } else if (edad >= 8 && edad < 11) {
                    if(sexo.equals("femenino"))
                    {
                        categ = "Menores Mujeres";
                    }
                    else
                    {
                        categ = "Menores Varones";
                    }
                    cargadatos(dni, fecha_nac, categ);
                } else if (edad < 5) {
                    limpia();
                    JOptionPane.showMessageDialog(null, "El aspirante no alcanza la edad para participar en alguna categoría", "ATENCIÓN", JOptionPane.ERROR_MESSAGE);
                } else {
                    limpia();
                    JOptionPane.showMessageDialog(null, "El aspirante supera la edad máxima para participar en alguna categoría", "ATENCIÓN", JOptionPane.ERROR_MESSAGE);
                }
            }
            else
            {
                JOptionPane.showMessageDialog(null, "LA FECHA DE NACIMIENTO DEBE TENER DATOS VÁLIDOS Y EL SIGUIENTE FORMATO: dd/mm/aaaa","CUIDADO" , JOptionPane.ERROR_MESSAGE);
            }
        }
        jTable1.setEnabled(false);
        jList3.setEnabled(false);
    }//GEN-LAST:event_jButton4ActionPerformed

    //metodo para analisis y carga datos del aspirante
    public void cargadatos(String dni, String fecha_nac, String cat)
    {
        if (isnumeric(dni) == true && dni.length() == 8) {
            String nom = jTextField1.getText();
            String apellido = jTextField2.getText();
            String direccion = jTextField3.getText();

            dni_id = new AspirantesId(Integer.parseInt(dni), jList1.getSelectedValue());
            nuevo = new Aspirantes(dni_id, nom, apellido, direccion, fecha_nac, sexo);
            int cantJlist2 = jList2.getModel().getSize(); //devuelve cantidad de elementos de la lista de Aspirantes
            String nombre = nuevo.getApellidos() + ", " + nuevo.getNombres() + " - DNI: " + dni;
            if (cantJlist2 == 0) {
                tabla2.addRow(new Object[]{nuevo.getNombres(), nuevo.getApellidos(), nuevo.getDireccion(), nuevo.getFnac(), nuevo.getSexo(), dni, cat, false});
                muestra(nombre);
            } else {
                boolean existe = recorrertabla(dni);
                boolean existe2 = AspiranteExiste(dni);
                if (existe == true) {
                    JOptionPane.showMessageDialog(null, "El aspirante con DNI: " + dni + " ya fue pre aprobado", "ATENCIÓN", JOptionPane.ERROR_MESSAGE);
                    limpia();
                }
                else if(existe2 == true)
                {
                    JOptionPane.showMessageDialog(null, "El aspirante con DNI: " + dni + " ya esta registrado en el sistema!!!", "ATENCIÓN", JOptionPane.ERROR_MESSAGE);
                    limpia();
                }
                else {
                    tabla2.addRow(new Object[]{nuevo.getNombres(), nuevo.getApellidos(), nuevo.getDireccion(), nuevo.getFnac(), nuevo.getSexo(), dni, cat, false});
                    muestra(nombre);
                }
            }
        } else {
            JOptionPane.showMessageDialog(null, "INGRESE CORRECTAMENTE EL DNI, SIN PUNTOS NI COMAS", "ATENCIÓN", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    //metodo para recorrer la lista de disciplinas
    public boolean recorrert() {
        int fila = tabla.getRowCount();
        int i;

        boolean valor;
        for (i = 0; i < fila; i++) {
             valor = Boolean.valueOf(tabla.getValueAt(i, 0).toString());
             if(valor == true)
             {
                 i = fila;
                 return true;
             }
        }
        return false;
    }
    
    //metodo que recorre la tabla auxiliar donde se almacenan los datos de los aspirantes 
    public boolean recorrertabla(String documento) {
        int fila = tabla2.getRowCount();
        int i;

        String valor;
        for (i = 0; i < fila; i++) {
             valor = tabla2.getValueAt(i, 5).toString();
             if(valor.equals(documento))
             {
                 i = fila;
                 return true;
             }
             else
             {
                 return false;
             }
        }
        return false;
    }
    
    //metodo para indicar si una cadena es numerica o no
    public boolean isnumeric(String numero)
    {
        try
        {
            long a = Integer.parseInt(numero);
            return true;
        }
        catch(NumberFormatException e)
        {
            return false;
        }
    }
    
    //metodo para indicar si la fecha fue escrita en forma correcta
    public boolean fechacorrecta()
    {
        String fecha = jTextField4.getText();
        if (fecha.length() == 10) {
            String dias = fecha.substring(0, 2);
            String meses = fecha.substring(3, 5);
            String years = fecha.substring(6, 10);
            String palit1 = fecha.substring(2, 3);
            String palit2 = fecha.substring(5, 6);
            if (isnumeric(dias) == true && isnumeric(meses) == true && isnumeric(years) == true && palit1.equals("/") && palit2.equals("/")) {
                int day = Integer.parseInt(dias);
                if(meses.equals("01"))//enero
                {
                    if(day < 32)
                    {
                        return true;
                    }
                    return false;
                }
                else if(meses.equals("02"))//febrero
                {
                    if(day < 30)
                    {
                        return true;
                    }
                    return false;
                }
                else if(meses.equals("03"))//marzo
                {
                    if(day < 32)
                    {
                        return true;
                    }
                    return false;
                }
                else if(meses.equals("04"))//abril
                {
                    if(day < 31)
                    {
                        return true;
                    }
                    return false;
                }
                else if(meses.equals("05"))//mayo
                {
                    if(day < 32)
                    {
                        return true;
                    }
                    return false;
                }
                else if(meses.equals("06"))//junio
                {
                    if(day < 31)
                    {
                        return true;
                    }
                    return false;
                }
                else if(meses.equals("07"))//julio
                {
                    if(day < 32)
                    {
                        return true;
                    }
                    return false;
                }
                else if(meses.equals("08"))//agosto
                {
                    if(day < 32)
                    {
                        return true;
                    }
                    return false;
                }
                else if(meses.equals("09"))//septiembre
                {
                    if(day < 31)
                    {
                        return true;
                    }
                    return false;
                }
                else if(meses.equals("10"))//octubre
                {
                    if(day < 32)
                    {
                        return true;
                    }
                    return false;
                }
                else if(meses.equals("11"))//noviembre
                {
                    if(day < 31)
                    {
                        return true;
                    }
                    return false;
                }
                else if(meses.equals("12"))//diciembre
                {
                    if(day < 32)
                    {
                        return true;
                    }
                    return false;
                }
                return false;
            } else {
                return false;
            }
        }
        else
        {
            return false;
        }
    }
    
    //metodo que permite limpiar los objetos de la pantalla "Nuevo Aspirante" y regresar a la pantalla principal 
    public void limpiarnombres() {
        limpia();
        jDialog1.dispose();
    }
    
    public void limpia()
    {
        jTextField1.setText("");
        jTextField2.setText("");
        jTextField3.setText("");
        jTextField4.setText("");
        jTextField5.setText("");
        sexo = "";
        categ = "";
        jRadioButton1.setSelected(false);
        jRadioButton2.setSelected(false);
    }

    //boton cancelar del formulario principal
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        limpia();
        this.dispose();
    }//GEN-LAST:event_jButton3ActionPerformed

    //boton Aceptar del formulario principal
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        try {
            String escuela = jList1.getSelectedValue();
            int cant = jTable2.getModel().getRowCount();
            String auxilia = null;
            String aspirante = "";
            Boolean existe = false;
            for (int i = 0; i < cant; i++) {
                auxilia = jTable2.getModel().getValueAt(i, 7).toString();
                if (Boolean.valueOf(auxilia) == false) {
                    aspirante += "\n" + jTable2.getModel().getValueAt(i, 1).toString() + ", " + jTable2.getModel().getValueAt(i, 0).toString() + " - DNI: " + jTable2.getModel().getValueAt(i, 5).toString();
                    existe = true;
                }
            }

            if (existe == true) {
                JOptionPane.showMessageDialog(null, "DEBE REGISTRAR LAS DISCIPLINAS Y CATEGORÍAS DE LOS SIGUIENTES ASPIRANTES PARA CONTINUAR: " + aspirante, "INFORMACIÓN IMPORTANTE", JOptionPane.INFORMATION_MESSAGE);
            } else {
                try {
                    if (cant > 0) {
                        cone.conectar();
                        int recor = jTable4.getModel().getRowCount(); //filas de la tabla auxiliar de disciplinas
                        PreparedStatement prepara; //prepara la sentencia SQL
                        PreparedStatement prepara2;
                        int count1 = 0;
                        int count2 = 0;
                        prepara = cone.getConnection().prepareStatement("INSERT INTO `mydb`.`aspirantes` VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?);");

                        dni_id = new AspirantesId();
                        nuevo = new Aspirantes();

                        for (int i = 0; i < cant; i++) {
                            //se crea un objeto aspirante para almacenar los datos en la base de datos     
                            nuevo.setNombres(jTable2.getModel().getValueAt(i, 0).toString());
                            nuevo.setApellidos(jTable2.getModel().getValueAt(i, 1).toString());
                            nuevo.setDireccion(jTable2.getModel().getValueAt(i, 2).toString());
                            nuevo.setFnac(jTable2.getModel().getValueAt(i, 3).toString());
                            nuevo.setSexo(jTable2.getModel().getValueAt(i, 4).toString());
                            dni_id.setDni(Integer.parseInt(jTable2.getModel().getValueAt(i, 5).toString()));
                            dni_id.setEscuelaNombreEscuela(escuela);
                            datos_cat = new Categorias(jTable2.getModel().getValueAt(i, 6).toString());

                            prepara.setInt(1, dni_id.getDni());
                            prepara.setString(2, nuevo.getNombres());
                            prepara.setString(3, nuevo.getApellidos());
                            prepara.setString(4, nuevo.getDireccion());
                            prepara.setString(5, nuevo.getFnac());
                            prepara.setString(6, nuevo.getSexo());
                            prepara.setString(7, "NO");
                            /*indica si el examen medico fue realizado o no 
                                                      en caso que el aspirante haya presentado certificado 
                                                      medico aprobado, es otra seccion del sistema encargado de 
                                                      registrarlo
                             */
                            prepara.setString(8, "SI");
                            /* indica si la documentacion del aspirante esta bien
                                                       si el aspirante figura en la lista es porque previamente
                                                       el administrador ya verificó la documentacion
                             */
                            prepara.setString(9, dni_id.getEscuelaNombreEscuela());

                            //recorre la tabla auxiliar de disciplinas
                            
                            String dni_ac = String.valueOf(dni_id.getDni());
                            String dni_tabla;
                            for (int a = 0; a < recor; a++) {
                                dni_tabla = jTable4.getModel().getValueAt(a, 0).toString();
                                if (dni_ac.equals(dni_tabla)) {
                                    datos_dis = new Disciplinas(jTable4.getModel().getValueAt(a, 1).toString());
                                    int id = CompetenciasExiste(datos_cat.getNombreCategoria(), datos_dis.getDisciplina());
                                    
                                    compet = new Competencias();
                                    datos_comp = new CompetenciasId();
                                    datos_comp.setIdCompetencias(id); //id de la competencia
                                    prepara2 = cone.getConnection().prepareStatement("INSERT INTO `mydb`.`aspirantes_has_competencias` VALUES (?, ?, ?, ?, ?, ?, ?, ?, null);");
                                    
                                    prepara2.setInt(1, dni_id.getDni());
                                    prepara2.setString(2, dni_id.getEscuelaNombreEscuela());
                                    prepara2.setInt(3, datos_comp.getIdCompetencias());
                                    prepara2.setString(4, datos_cat.getNombreCategoria());
                                    prepara2.setString(5, datos_dis.getDisciplina());
                                    prepara2.setInt(6, 1); //id torneo
                                    prepara2.setInt(7, 1); //id sede
                                    prepara2.setString(8, "NO");
   
                                    count2 = prepara2.executeUpdate();     
                                }
                            }
                            count1 = prepara.executeUpdate(); //inserta datos en la tabla aspirantes
                        }
                        if (count1 > 0 && count2 > 0) {
                            list2.removeAllElements();
                            while(tabla2.getRowCount() > 0)
                            {
                                tabla2.removeRow(0);
                            }
                            
                            while(tabla3.getRowCount() > 0)
                            {
                                tabla3.removeRow(0);
                            }
                            jTable1.setEnabled(false);
                            JOptionPane.showMessageDialog(null, "DATOS AGREGADOS CORRECTAMENTE", "DETALLE", JOptionPane.INFORMATION_MESSAGE);
                        }
                        cone.desconectar();
                    } else {
                        JOptionPane.showMessageDialog(null, "INGRESE ASPIRANTES PARA CONTINUAR", "ERROR", JOptionPane.ERROR_MESSAGE);
                    }
                } catch (SQLException e) {
                    JOptionPane.showMessageDialog(null, "NO SE PUEDE CONECTAR CON LA BASE DE DATOS, POR FAVOR INTÉNTELO MÁS TARDE...", "ERROR", JOptionPane.ERROR_MESSAGE);
                }
            }
        } catch (HeadlessException | NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "DEBE INGRESAR ASPIRANTES PARA CONTINUAR", "ATENCIÓN", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    Boolean seleccionado = false;
    //evento que se desenlaza si se hace click sobre la tabla competencias
    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked

        int[] indices = jList2.getSelectedIndices();
        if (indices.length == 0) {
            JOptionPane.showMessageDialog(null, "Debe seleccionar un Aspirante para continuar", "ATENCIÓN", JOptionPane.INFORMATION_MESSAGE);
        } else {
            boolean existe = recorrert();

            if (existe == false) {
                JOptionPane.showMessageDialog(null, "Seleccione al menos una competencia", "ATENCIÓN", JOptionPane.INFORMATION_MESSAGE);
            } else {
                if (habilitado == true) {
                    int index = jTable1.getSelectedRow();
                    String discipline_aux = jTable1.getModel().getValueAt(index, 0).toString();
                    if (Boolean.valueOf(discipline_aux) == true) {
                        String discipline = jTable1.getModel().getValueAt(index, 1).toString();
                        sexo_cat(); //obtengo sexo y categoria del aspirante seleccionado
                        int valor = CompetenciasExiste(categ, discipline);

                        if (valor < 1) {
                            jTable1.getModel().setValueAt(false, index, 0);
                            JOptionPane.showMessageDialog(null, "NO EXISTE COMPETENCIA CREADA PARA LA DISCIPLINA Y SEXO DEL ASPIRANTE", "REVISAR", JOptionPane.ERROR_MESSAGE);
                            if (recorrert() == false) {
                                JOptionPane.showMessageDialog(null, "Seleccione una competencia", "REVISAR", JOptionPane.ERROR_MESSAGE);
                            } else {
                                not_selection();
                            }
                        } else {
                            not_selection();
                        }
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Seleccione la categoría en la que competirá el aspirante", "ATENCIÓN", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_jTable1MouseClicked

    public void not_selection() {
        int consulta = JOptionPane.showConfirmDialog(null, "¿Desea inscribir al Aspirante en otras disciplinas?", "CONSULTA", JOptionPane.OK_CANCEL_OPTION);
        if (consulta == JOptionPane.OK_OPTION) {
            seleccionado = true;
            //si el usuario selecciona esta opcion puede seguir agregando competencias para tal aspirante
        } else {
            seleccionado = false;
            habilitado = false;
            if (habilitado == false) {
                //almacena competencias y consulta categoria
                jTable1.setEnabled(false); //lista de disciplinas
                jList3.setEnabled(true); //lista de categorias

                JOptionPane.showMessageDialog(null, "Seleccione la categoría en la que competirá el aspirante", "ATENCIÓN", JOptionPane.INFORMATION_MESSAGE);
            }
        }

        //el sistema selecciona la categoria correspondiente para el aspirante en cuestion
        String aux6;
        int c = jList3.getModel().getSize(); //cantidad de elementos de la lista categorias
        for (int i = 0; i < c; i++) {
            aux6 = jList3.getModel().getElementAt(i);
            if (aux6.equals(categ)) {
                jList3.setSelectedIndex(i);
                i = c;
            }
        }
    }
    
    public void sexo_cat() {
        //recorre las filas de la tabla auxiliar 
        String aux1 = jList2.getSelectedValue(); //lista de aspirantes
        String aux2;
        String aux3;
        String aux4;
        String aux5;
        int j = jTable2.getModel().getRowCount(); //retorna cantidad de columnas
        int a = jTable2.getModel().getColumnCount(); //retorna cantidad de filas de la tabla auxiliar aspirantes
        for (int r = 0; r < j; r++) {
            for (int i = 0; i < a; i++) {
                aux2 = jTable2.getValueAt(i, 0).toString(); //retorna nombre
                aux3 = jTable2.getValueAt(i, 1).toString(); //retorna apellido
                aux4 = jTable2.getValueAt(i, 5).toString(); //retorna dni

                aux5 = aux3 + ", " + aux2 + " - DNI: " + aux4;
                if (aux5.equals(aux1)) {
                    sexo = jTable2.getValueAt(i, 4).toString(); //retorna sexo
                    categ = jTable2.getValueAt(i, 6).toString(); //retorna categoria
                    i = a;
                    r = j;
                }
            }
        }
    }
    
    //metodo para extraer las competencias vigentes
    public Integer CompetenciasExiste(String categori, String disciplin) {
        try {
            cone.conectar();
            String SQL = "SELECT idCompetencias FROM mydb.competencias where categorias_nombre_categoria = '" + categori + "' and disciplinas_disciplina = '" + disciplin + "';";
            Statement nueva_conexion = cone.getConnection().createStatement();
            ResultSet resultado = nueva_conexion.executeQuery(SQL);
            
            int num;
            while(resultado.next())
            {
                 num = resultado.getInt(1);
                 return num;
            }
            cone.desconectar();
            
            return -1;
        } catch (SQLException e) {
            return -1;
        }
    }
    
    
    public void lista_aspirantes() {
        Boolean cargado = false;
        try {
            String auxiliar = jList2.getSelectedValue();
            int a = auxiliar.length();
            auxiliar = auxiliar.substring(a - 8, a); //DNI del aspirante seleccionado

            int b = jTable2.getModel().getRowCount();
            String DNI;
            for (int i = 0; i < b; i++) {
                DNI = jTable2.getModel().getValueAt(i, 5).toString(); //DNI almacenado
                if (auxiliar.equals(DNI)) {
                    String contiene;
                    try {
                        contiene = jTable2.getModel().getValueAt(i, 7).toString();
                    } catch (Exception e) {
                        contiene = "false";
                    }

                    if (Boolean.valueOf(contiene) == true) {
                        cargado = true;
                    }
                    i = b;
                }
            }
        } catch (Exception e) {
            cargado = false;
        }

        if (cargado == true) {
            jTable1.setEnabled(false);
            jList3.setEnabled(false);
            JOptionPane.showMessageDialog(null, "ASPIRANTE PRE-APROBADO", "ATENCIÓN", JOptionPane.INFORMATION_MESSAGE);
        } else {
            jTable1.setEnabled(true);
            habilitado = true;
            borrarDisciplinas();
        }
    }
    
    //evento que se desenlaza si cambia algun valor en la lista de Aspirantes 
    private void jList2ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList2ValueChanged
        // TODO add your handling code here:
        lista_aspirantes();
    }//GEN-LAST:event_jList2ValueChanged

    
    //obtiene el dni del aspirante seleccionado
    public String seleccion()
    {
        String nuevo = null;
        try{
            nuevo = jList2.getSelectedValue();
            int a = nuevo.length();
            
            nuevo = nuevo.substring(a-8, a);
        }
        catch(Exception e)
        {
            
        }
        return nuevo;
    }
    
    private void jList3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList3MouseClicked
        // TODO add your handling code here:
        String valor = null;
        try{
            valor = jList3.getSelectedValue();
            if (valor.length()== 0) {
                JOptionPane.showMessageDialog(null, "Ingrese categoría del Aspirante", "CUIDADO", JOptionPane.INFORMATION_MESSAGE);
            } else if (seleccionado == false) {
                int consulta2 = JOptionPane.showConfirmDialog(null, "¿Confirma categoría del Aspirante?", "ATENCIÓN", JOptionPane.OK_CANCEL_OPTION);

                if (consulta2 == JOptionPane.OK_OPTION) {
                    String obtieneDNI = seleccion();
                    tabla3 = (DefaultTableModel) jTable4.getModel();
                    int fila = tabla.getRowCount();
                    int i;
                    boolean disciplina;
                    for (i = 0; i < fila; i++) {
                        disciplina = Boolean.valueOf(tabla.getValueAt(i, 0).toString());
                        if (disciplina == true) {
                            //guarda las competencias en las que se inscribirá al aspirante en la tabla auxiliar "tabla3"
                            tabla3.addRow(new Object[]{obtieneDNI, tabla.getValueAt(i, 1)});
                        }
                    }
                    
                    //indica que el aspirante ya fue pre aprobado
                    int a = jTable2.getModel().getRowCount();
                    String almacena;
                    for(int j = 0; j < a; j++)
                    {
                        almacena = jTable2.getModel().getValueAt(j, 5).toString();
                        if(almacena.equals(obtieneDNI))
                        {
                            jTable2.getModel().setValueAt(true, j, 7);
                            j = a;
                        }
                    }
                    
                    jList3.clearSelection();
                    jList3.setEnabled(false);
                    borrarDisciplinas();
                    jTable1.setEnabled(false);
                } else {
                    JOptionPane.showMessageDialog(null, "Si no esta de acuerdo con la categoría predeterminada por el sistema, seleccione uno", "INFORMACIÓN", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        }
        catch(Exception e)
        {
            JOptionPane.showMessageDialog(null, "Seleccione un Aspirante", "CUIDADO", JOptionPane.INFORMATION_MESSAGE);
        }
    }//GEN-LAST:event_jList3MouseClicked

    public Boolean AspiranteExiste(String dni) {
        try {
            String SQL1 = "SELECT DNI FROM mydb.aspirantes where DNI='" + dni + "';";
            cone.conectar();
            Statement nueva = cone.getConnection().createStatement();
            ResultSet resultado = nueva.executeQuery(SQL1);
            
            if(resultado.getRow() > 0)
            {
                return true;
            }
            
            cone.desconectar();
            return false;
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, e.toString());
        }
        return false;
    }
    
    public void borrarDisciplinas() {
        //limpia la lista de disciplinas elegidas si cambia de aspirante
        int fila = tabla.getRowCount();
        for (int i = 0; i < fila; i++) {
            tabla.setValueAt(false, i, 0);
        }
        
        //limpia seleccion de categorias
        jList3.clearSelection();
        
        jList3.setEnabled(false); //bloquea lista de categorias
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Formulario1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Formulario1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Formulario1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Formulario1.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                JFrame.setDefaultLookAndFeelDecorated(true);
                SubstanceLookAndFeel.setSkin("org.jvnet.substance.skin.CremeCoffeeSkin");
                new Formulario1().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JList<String> jList1;
    private javax.swing.JList<String> jList2;
    private javax.swing.JList<String> jList3;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable4;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    // End of variables declaration//GEN-END:variables
}
